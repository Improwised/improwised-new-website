---
import { getCollection } from "astro:content";
import Layout from "$lib/layouts/Layout.astro";
import { Badge } from "$lib/components/ui/badge";
import { BASE_URL } from "$lib/consts";
import { ArrowBigRightDash, Logs, Globe, BadgeCheck } from "lucide-svelte/icons";
import * as Card from "$lib/components/ui/card";
import { Image } from "astro:assets";
import avtarImage from "$lib/images/blogs/impro.png";
import { formatDate } from "$lib/utils";
import BlockAccordion from "$lib/components/BlockAccordion.astro";
import SectionTitle from "$lib/components/common/SectionTitle.svelte";

export async function getStaticPaths() {
  const services = await getCollection("services");

  let paths = [];
  for (const service of services) {
    if (
      Array.isArray(service.data.blocks) &&
      service.id == "platform-engineering"
    ) {
      for (const block of service.data.blocks) {
        paths.push({
          params: {
            servicepage: service.data.slug,
            block: block.slug,
          },
          props: {
            service,
            block,
          },
        });
      }
    } else {
      console.warn(`No blocks found for service: ${service.data.slug}`);
    }
  }
  return paths;
}

const { service, block } = Astro.props;
const currentUrl = Astro.url.pathname.split("/");
const slug = currentUrl.at(currentUrl.length - 2)
const filteredBlock = service.data.blocks?.filter(block => block.slug === slug);


const blogs = await getCollection("blogs");
const filteredBlogs = blogs.filter((b) => b.data.blockCategory == block.slug);


let gradientX = 45.5;
let gradientY = -200;
---

<Layout title={block.seoTitle} description={block.seoDescription}>
  <main class="main-content z-10">
    <section
      class="section1 flex flex-col items-center justify-center text-center px-6 bg-image relative pt-30 pb-20 md:pt-80 md:pb-[240px]"
    >
      <!-- Main Heading -->
      <h1
				class="capitalize font-manrope mt-4 mb-6 max-md:text-center main-heading-small md:main-heading text-main-heading-color"
			>
			{block.title}
			</h1>

      <!-- Subtext -->
      <p class="mt-6 text-para max-w-4/5 text-third-color">
        {block.description}
      </p>
    </section>
   
    <section class="section2 overflow-x-hidden py-10 md:py-40 section-bg">
      <BlockAccordion blockSlug={slug} />
    </section>

    <section class="section py-10 md:py-40 section-bg">
      <div class="flex mx-auto max-w-2xl flex-col items-center justify-center">
        <Badge variant="outline" class="py-1">
            <BadgeCheck class="mr-1" size={18} />
            <span class="text-xs font-bold md:text-sm tracking-wider font-manrope">Achievements</span>
        </Badge>
        <SectionTitle primaryColorText="Achieve" text="What You Can" class="text-center" />
      </div>
      <div class="container flex flex-col gap-4 md:pt-10 max-w-5xl">
        {
          filteredBlock && filteredBlock[0].achievements?.map((achiement) => (
            <div class="flex gap-4 border-b-1 border-dashed pb-6">
              <ArrowBigRightDash color="#009DC9"/>
              <p class="small-text md:text-para font-inter text-fourth-color">{achiement}</p>
            </div>
          ))
        }
      </div>
    </section>

    <section class="section4 py-10 md:py-40 section-bg">
      <div class="container">
        <div
          class="flex mx-auto max-w-2xl flex-col items-center justify-center"
        >
        <Badge variant="outline" class="py-1">
          <Globe class="mr-1" size={18} />
          <span class="text-xs font-bold md:text-sm tracking-wider font-manrope">Industry</span>
        </Badge>
          <SectionTitle
          text="We Serve"
          primaryColorText="Industries"
          class="text-center md:w-[96%]"
          isPrimaryTextInitial={true}
          />
        </div>
        <div class="md:pt-10 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {
            filteredBlock && filteredBlock[0].industries?.map((industry) => (
            <Card.Root
              class="overflow-hidden border-1 bg-card-bg border-career-card rounded-[20px] shadow-nav text-center"
              onmousemove="updateGradient(event)"
              style={`--gradient-x: ${gradientX}px; --gradient-y: ${gradientY}px;`}
              >
              <div
                class="card-custom-inner p-8"
                style={`--gradient-x: ${gradientX}px; --gradient-y: ${gradientY}px;`}
                onmousemove="updateGradient(event)"
              >
                <Card.Content class="p-0 text-left flex flex-col text-[#141414] tracking-tight">
                  <Card.Title class="text-fifth-color text-[18px] leading-[22px] md:text-[22px] md:leading-[28px] tracking-[0.02em] font-manrope">
                    {industry.title}
                  </Card.Title>
                  <p class="pt-5 small-text md:text-para font-inter text-fourth-color">
                    {industry.description}
                  </p>
                </Card.Content>
              </div>
              </Card.Root>
            ))
          }
        </div>
      </div>
    </section>

    <section class="section py-10 md:py-40 section-bg">
      <div class="container">
        <Badge variant="outline" class="py-1 mb-8">
          <Logs class="mr-1" size={18} />
          <span
            class="text-xs font-bold md:text-sm tracking-wider font-manrope"
            >Recommanded Blogs</span
          >
        </Badge>

        <div
          class="grid grid-cols-3 max-md:grid-cols-1 max-lg:grid-cols-2 gap-8"
        >
          {
            filteredBlogs.map((blog, index) => (
              <Card.Root class="group overflow-hidden shadow-nav flex flex-col justify-between bg-card-bg border-1 border-card-border transition-transform duration-500">
                <Card.Header class="md:p-0 text-center bg-[#f0f0f0] dark:bg-[#3a3b3f69]">
                  <Image
                    alt="feature"
                    class="w-full object-contain sm:h-[250px] md:h-[300px] transition-all duration-200  group-hover:scale-105"
                    decoding="async"
                    loading="lazy"
                    src={blog.data.image}
                  />
                </Card.Header>
                <Card.Content class="">
                  <p class="mb-2 font-manrope text-[#A3A3A3] text-[16px] leading-[24px] tracking-[16%] uppercase">
                    {formatDate(blog.data.publishDate)}
                  </p>
                  <Card.Title class="text-[20px] text-fifth-color font-manrope font-bold leading-[24px] tracking-tight">
                    <a href={BASE_URL + "/blog/" + blog.data.slug + "/"}>
                      {blog.data.title}
                    </a>
                  </Card.Title>
                </Card.Content>
                <Card.Footer>
                  <div class="flex gap-x-2 items-center">
                    <Image
                      alt="feature"
                      class="rounded-full"
                      width={56}
                      height={56}
                      src={avtarImage}
                    />
                    <p class="font-semibold text-fifth-color text-[18px] tracking-tight">
                      By {blog.data.author}
                      <br />
                      <span class="font-normal text-fourth-color text-[16px] leading-[18px] tracking-tight">
                        Improwised Technologies Pvt. Ltd.
                      </span>
                    </p>
                  </div>
                </Card.Footer>
              </Card.Root>
            ))
          }
        </div>
      </div>
    </section>
  </main>
</Layout>

<script is:inline>
  function updateGradient(event) {
    const rect = event.currentTarget.getBoundingClientRect();
    gradientX = event.clientX - rect.left;
    gradientY = event.clientY - rect.top;

    // Update the style dynamically
    const target = event.currentTarget;
    target.style.setProperty("--gradient-x", `${gradientX}px`);
    target.style.setProperty("--gradient-y", `${gradientY}px`);
  }
</script>