---
import { Badge } from "$lib/components/ui/badge";
import SectionTitle from "$lib/components/common/SectionTitle.svelte";
import { Image } from "astro:assets";
import { level1, level2, level3 } from "src/tech-images";
import { BASE_URL } from "../consts";

const calculateOrbitPositions = (
  count: number,
  radiusPercentage: number,
  containerSize: number
) => {
  const radius = (radiusPercentage / 100) * containerSize;
  return Array.from({ length: count }).map((_, i) => {
    const angle = (i * (2 * Math.PI)) / count;
    const x = radius * Math.cos(angle);
    const y = radius * Math.sin(angle);
    return { x, y };
  });
};

const orbits = [
  { radius: 19, count: 10, images: level1 },
  { radius: 32, count: 13, images: level2 },
  { radius: 45, count: 17, images: level3 },
];
---

<div class="section py-20 bg-white overflow-hidden relative">
  <svg
        viewBox="0 0 1440 181"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        class="absolute inset-x-0 top-0 w-full block"
        data-v-baf90ddd=""
        ><mask id="path-1-inside-1_1086_7239" fill="white"
            ><path d="M0 0H1440V181H0V0Z"></path></mask
        ><path
            d="M0 0H1440V181H0V0Z"
            fill="url(#paint0_linear_1086_7239)"
            fill-opacity="0.22"></path><path
            d="M0 2H1440V-2H0V2Z"
            fill="url(#paint1_linear_1086_7239)"
            mask="url(#path-1-inside-1_1086_7239)"></path><defs
            ><linearGradient
                id="paint0_linear_1086_7239"
                x1="720"
                y1="0"
                x2="720"
                y2="181"
                gradientUnits="userSpaceOnUse"
                ><stop stop-color="#72b14a"></stop><stop
                    offset="1"
                    stop-color="#72b14a"
                    stop-opacity="0"></stop></linearGradient
            ><linearGradient
                id="paint1_linear_1086_7239"
                x1="0"
                y1="90.5"
                x2="1440"
                y2="90.5"
                gradientUnits="userSpaceOnUse"
                ><stop stop-color="#72b14a" stop-opacity="0"></stop><stop
                    offset="0.395"
                    stop-color="#72b14a"></stop><stop
                    offset="1"
                    stop-color="#72b14a"
                    stop-opacity="0"></stop></linearGradient
            ></defs
        ></svg
    >
  <div
    class="text-center mx-auto flex max-w-3xl flex-col items-center justify-center px-5"
  >
    <Badge
      class="border border-primary-300 ring-2 mb-4 ring-opacity-20 ring-primary-500 ring-primary"
      variant="outline"
    >
     Tech & Tools
    </Badge>
    <SectionTitle text="Our" primaryColorText="Toolbox" class="mb-0 xs:mb-6" />
  </div>

  <div
    class="relative  overflow-hidden mx-auto aspect-square flex justify-center items-center"
    id="orbit-container"
    data-aos="zoom-in"
  >
    {
      orbits.map(({ radius, count, images }, index) => {
        return (
          <div
            class={`absolute bg-white rounded-full border-2 z-10 border-slate-300
            ${index === 0 ? "z-30 btn-down" : index === 1 ? "z-20" : ""}
            ${index % 2 === 0 ? "animate-cw" : "animate-ccw"}
          `}
            data-radius-sm={radius}
            data-count={count}
          >
            <div
              class={`flex items-center justify-center transition shadow-md border-r-2 w-[calc(100%_+4px)] h-[calc(100%_+4px)] -mt-0.5 -ml-0.5 border-[#6CB33f]
              ${index % 2 === 0 ? "animate-border-cw" : "animate-border-ccw"} rounded-full inner-shadow
              ${index === 0 ? "border-y-0 border-l-0 border-r-2" : index === 1 ? "border-b-2 border-r-0" : "border-l-2 border-r-0"}
          `}
            >
            </div>
            {calculateOrbitPositions(count, radius, 0).map(
              ({ x, y }, iconIndex) => (
                <div
                  id="tool"
                  style={{
                    left: `calc(50% + ${x}px)`,
                    top: `calc(50% + ${y}px)`,
                    transform: "translate(-50%, -50%)",
                  }}
                  class={`group bg-white outline-none absolute flex justify-center items-center cursor-pointer
              `}
                >
                  <div
                    class={`z-30 bg-white flex flex-col items-center justify-center flex justify-center
              ${index === 0 ?
              "w-4 xs:w-[1.9rem] sm:w-[2.7rem] md:w-[3.7rem]" :
              index == 1 ? "w-6 xs:w-10 sm:w-[3.2rem] md:w-16" :
              "w-7 xs:w-[3.2rem] sm:w-16 md:w-20"}
              transition group-hover:scale-105 ${index % 2 === 0 ? "animate-ccw" : "animate-cw"}
             `}
                  >
                    <a href={images[iconIndex].link}>
                      <Image
                        height={48}
                        layout="responsive"
                        src={images[iconIndex].url}
                        alt={images[iconIndex].alt}
                        class={`transition group-hover:scale-110`}
                      />
                    </a>
                    <p class="text-slate-700 md:tracking-tighter font-semibold text-center text-[0.4rem] sm:text-[0.5rem] md:text-[0.7rem]">
                      {images[iconIndex].name}
                    </p>
                  </div>
                </div>
              )
            )}
          </div>
        );
      })
    }
    <div class="z-30">
        <Image
            height={60}
            width={60}
            src={`${BASE_URL}/favicon.ico`}
            alt="icon"
        />
    </div>
  </div>
</div>

<script>
  const adjustOrbitRadii = () => {
    const container = document.getElementById("orbit-container") as HTMLElement;
    const containerSize = Math.min(
      container.clientWidth,
      container.clientHeight
    );

    const orbitDivs = document.querySelectorAll("#orbit-container > div");
    orbitDivs.forEach((div) => {
      const radius = parseFloat(
        (div as HTMLElement).getAttribute("data-radius-sm")!
      );
      const count = parseInt(
        (div as HTMLElement).getAttribute("data-count")!,
        10
      );
      const actualRadius = (radius / 100) * containerSize;

      (div as HTMLElement).style.width = `${2 * actualRadius}px`;
      (div as HTMLElement).style.height = `${2 * actualRadius}px`;
      (div as HTMLElement).style.margin = `calc(50% - ${actualRadius}px)`;

      const icons = (div as HTMLElement).querySelectorAll("#tool");
      icons.forEach((icon, iconIndex) => {
        const { x, y } = calculateOrbitPositions(
          count,
          radius,
          containerSize
        )[iconIndex];
        (icon as HTMLElement).style.left = `calc(50% + ${x}px)`;
        (icon as HTMLElement).style.top = `calc(50% + ${y}px)`;
      });
    });
  };

  const calculateOrbitPositions = (
    count: number,
    radiusPercentage: number,
    containerSize: number
  ) => {
    const radius = (radiusPercentage / 100) * containerSize;
    return Array.from({ length: count }).map((_, i) => {
      const angle = (i * (2 * Math.PI)) / count;
      const x = radius * Math.cos(angle);
      const y = radius * Math.sin(angle);
      return { x, y };
    });
  };

  document.addEventListener("DOMContentLoaded", adjustOrbitRadii);
  window.addEventListener("resize", adjustOrbitRadii);
</script>
