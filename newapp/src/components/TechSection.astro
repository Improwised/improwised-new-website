---
import { Badge } from "$lib/components/ui/badge";
import { Image } from "astro:assets";
import { CircleUserRound } from "lucide-svelte/icons";
import SectionTitle from "$lib/components/common/SectionTitle.svelte";
import { level1, level2, level3, level4 } from "src/tech-images";

const calculateOrbitPositions = (
  count: number,
  radiusPercentage: number,
  containerSize: number
) => {
  const radius = (radiusPercentage / 100) * containerSize;
  return Array.from({ length: count }).map((_, i) => {
    const angle = (-180 + (i * 180) / (count - 1)) * (Math.PI / 180);
    const x = radius * Math.cos(angle);
    const y = radius * Math.sin(angle);
    return { x, y };
  });
};

const orbits = [
  { radius: 10, count: 3, images: level1 },
  { radius: 15, count: 0 },
  { radius: 20, count: 6, images: level2 },
  { radius: 27, count: 0 },
  { radius: 33, count: 10, images: level3 },
  { radius: 39, count: 0 },
  { radius: 45, count: 12, images: level4 },
  { radius: 50, count: 0 },
];
---

<div class="section bg-white bg-tech-image relative py-10 md:pt-40 pb-24">
  <div class="container">
    <!-- Section Title -->
    <div
      class="text-center mx-auto flex max-w-3xl flex-col items-center justify-center"
    >
      <Badge variant="outline" class="py-1">
        <CircleUserRound class="mr-1" size={18} />
        <span class="text-xs font-bold md:text-sm tracking-wider font-manrope"
          >Tech Stack</span
        >
      </Badge>
      <SectionTitle
        class="text-center"
        text="we work with"
        primaryColorText="Technologies"
        isPrimaryTextInitial={true}
      />
    </div>
  </div>
  <div
    class="relative overflow-hidden mx-auto aspect-square flex justify-center items-center"
    id="orbit-container"
    data-aos="zoom-in"
  >
    {
      orbits.map(({ radius, count, images }, index) => {
        return (
          <div
            class={`absolute bg-white rounded-t-full
            ${index == 7 ? "-z-50" : index == 6 ? "-z-40" : index == 5 ? "-z-30" : index == 4 ? "-z-20" : ""}
            ${index < 3 ? `z-${30 - index * 10}` : `-z-${index * 10 - 20}`}
            ${index % 2 !== 0 && index !== 1 && index !== 7 ? "border-gradient inner-border-color shadow-[0px_-14px_23px_rgba(26,182,223,0.10)]" : index === 7 ? "border-gradient outer-border-color shadow-[0px_-14px_23px_rgba(167,224,117,0.10)]" : ""}
          `}
            data-radius-sm={radius}
            data-count={count}
            data-index={index}
          >
            {count > 0 &&
              calculateOrbitPositions(count, radius, 0).map(
                ({ x, y }, iconIndex) => (
                  <div
                    id="tool"
                    style={{
                      left: `calc(50% + ${x}px)`,
                      top: `calc(50% + ${y}px)`,
                      transform: "translate(-50%, -50%)",
                    }}
                    class={`group bg-white outline-hidden absolute flex justify-center items-center cursor-pointer
              `}
                  >
                    <div class="relative max-sm:h-6">
                      {index == 0 && (iconIndex == 0) && (
                        <p id="open-source"
                          class="w-max z-50 absolute md:tracking-tighter font-medium font-inter text-center text-[0.4rem] sm:text-[0.5rem] md:text-[1rem] text-[#424242]"
                          style={{
                            left: `calc(50% + ${x}px)`,
                            top: `calc(190% + ${y}px)`,
                            transform: "translate(-50%, -50%)",
                          }}
                        >
                          Open Source
                        </p>
                      )}
                      {index == 4 && (iconIndex == 0 || iconIndex == count-1) && (
                        <p
                          class="w-max absolute z-50 md:tracking-tighter font-medium font-inter text-center text-[0.4rem] sm:text-[0.5rem] md:text-[1rem] text-[#424242]"
                          style={{
                            left: `calc(50% + ${x}px)`,
                            top: `calc(190% + ${y}px)`,
                            transform: "translate(-50%, -50%)",
                          }}
                        >
                          Level - 2
                        </p>
                      )}
                       {index == 6 && (iconIndex == 0 || iconIndex == count-1) && (
                        <p
                          class="w-max absolute z-50 md:tracking-tighter font-medium font-inter text-center text-[0.4rem] sm:text-[0.5rem] md:text-[1rem] text-[#424242]"
                          style={{
                            left: `calc(50% + ${x}px)`,
                            top: `calc(190% + ${y}px)`,
                            transform: "translate(-50%, -50%)",
                          }}
                        >
                          Level - 3
                        </p>
                      )}

                      <div>
                        <a
                          href={images?.[iconIndex]?.link}
                          class={`z-30 bg-white flex-col items-center justify-center flex
                        w-4 xs:w-[1.9rem] sm:w-[2.7rem] md:w-[3.7rem]
                        transition group-hover:scale-105
              `}
                        >
                          <Image
                            height={40}
                            layout="responsive"
                            src={images?.[iconIndex].url ?? "#"}
                            alt={images?.[iconIndex].alt ?? "icon"}
                            class={`transition group-hover:scale-110`}
                          />
                          <p class="text-slate-700 md:tracking-tighter font-semibold text-center text-[0.4rem] sm:text-[0.5rem] md:text-[0.7rem]">
                            {images?.[iconIndex].name}
                          </p>
                        </a>
                      </div>
                    </div>
                  </div>
                )
              )}
          </div>
        );
      })
    }
  </div>
</div>

<script>
  const adjustOrbitRadii = () => {
    const container = document.getElementById("orbit-container") as HTMLElement;
    const containerSize = Math.min(container.clientWidth);

    const orbitDivs = document.querySelectorAll("#orbit-container > div");
    orbitDivs.forEach((div) => {
      const radius = parseFloat(
        (div as HTMLElement).getAttribute("data-radius-sm")!
      );
      const count = parseInt(
        (div as HTMLElement).getAttribute("data-count")!,
        10
      );
      const index = parseInt((div as HTMLElement).getAttribute("data-index")!)

      const actualRadius = (radius / 100) * containerSize;

      (div as HTMLElement).style.width = `${2 * actualRadius}px`;
      (div as HTMLElement).style.height = `${actualRadius}px`;
      (div as HTMLElement).style.top = `calc(80% - ${actualRadius}px)`;

      const icons = (div as HTMLElement).querySelectorAll("#tool");
      
      icons.forEach((icon, iconIndex) => {
        const { x, y } = calculateOrbitPositions(count, radius, containerSize)[
          iconIndex
        ];
        (icon as HTMLElement).style.left = `calc(50% + ${x}px)`;
        (icon as HTMLElement).style.top = `calc(100% + ${y}px)`;
        if (index == 0 && iconIndex == 0) {
          let s = 0.5 * containerSize
          const openSource = document.querySelector("#open-source") as Element;
          (openSource as HTMLElement).style.left = `${actualRadius*1.4}px`;
        }
      });
    });
  };

  const calculateOrbitPositions = (
    count: number,
    radiusPercentage: number,
    containerSize: number
  ) => {
    const radius = (radiusPercentage / 100) * containerSize;
    return Array.from({ length: count }).map((_, i) => {
      const angle = (-180 + (i * 180) / (count - 1)) * (Math.PI / 180);
      const x = radius * Math.cos(angle);
      const y = radius * Math.sin(angle);
      return { x, y };
    });
  };

  document.addEventListener("DOMContentLoaded", adjustOrbitRadii);
  window.addEventListener("resize", adjustOrbitRadii);
</script>
